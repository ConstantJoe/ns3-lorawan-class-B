#ifndef AES_H
#define AES_H

#include <inttypes.h>

#ifndef BYTE
  #define BYTE uint8_t
#endif
#ifndef WORD
  #define WORD uint32_t
#endif

//key length related parameters
#define NB 4
#define NK 4
#define KEY_SIZE NK*NB
#define NR NB+NK+2

union Word
{
  BYTE b[4];
  WORD w;
};

class AES
{
public:
  /**
   * @brief AES constructor allocates memory for the state array
   */
  AES();

  /**
   * @brief AES destructor cleans up memory
   */
  ~AES();

  /**
   * @brief Encrypts the input data
   * @param input the pointer to the input information
   */
  void Encrypt(BYTE *input, int size);

  /**
   * @brief Decrypts the data, stored at output pointer
   * @param output the pointer to the input and output information
   */
  void Decrypt(BYTE *output, int size);

  /**
   * @brief SetKey sets the key for cipher
   * @param key the key
   * @param size length of the key
   */
  void SetKey(BYTE *key, int size);
private:
  /**
   * @brief state the main element of cipher - matrix 4xNB
   * used for store information during cipher process
   */
  Word state[NB];

  /**
   * @brief KeySchedule used to store round keys
   */
  Word keySchedule[NB * (NR + 1)];

  /**
   * @brief InputToState writes input into state
   * @param input the pointer to the input data
   */
  void InputToState(Word *input);

  /**
   * @brief StateToOutput saves state to the output
   * @param output the pointer for the output data
   */
  void StateToOutput(Word *output);

  //Here are functions that will be needed for encryption

  /**
   * @brief Cipher encrypts the data
   * @param data the pointer to the data
   */
  void Cipher(Word *data);

  /**
   * @brief ExpandKey expands key and creates round keys that will be stored in KeySchedule
   * @param key the pointer to the key data
   */
  void ExpandKey(Word *key);

  /**
   * @brief SubBytes makes byte substitution in the input
   * @param input word to which we apply subtitution
   * @param isInverse if true makes it run with InvSBox, otherwise with SBox
   */
  void SubBytes(Word &input, bool isInverse = false);

  /**
   * @brief ShiftRows shifts rows of the state as follows:
   * 1st row is unchanged
   * 2nd row shifts over one to the left
   * 3rd row shifts over two to the left
   * 4th row shifts over three to the left
   */
  void ShiftRows();

  /**
   * @brief MixColumns multiplies state matrix in Galua field
   * in column-by-column way each column multiplies with matrix
   * / {02} {03} {01} {01} \
   * | {01} {02} {03} {01} |
   * | {01} {01} {02} {03} |
   * \ {03} {01} {01} {02} /
   */
  void MixColumns();

  /**
   * @brief AddRoundKey adds round key to the state
   * @param round the current round number
   */
  void AddRoundKey(int round);

  /**
   * @brief RotWord rotates the word
   * @param data the word to rotate
   * @param isRightRot is it rotation to the right (left rotation used for encryption,
   * right rotation for decryption)
   * @param count amount of bytes over which will be rotated
   */
  void RotWord(Word &data, bool isRightRot = false, int count = 1);

  //Here are functions for decryption, they have prefix Inv in their names
  //some of needed functions was declared above, they have bool variables
  //to control their behaviour

  /**
   * @brief InvCipher decrypts the data
   * @param data the pointer to the data
   */
  void InvCipher(Word *data);

  /**
   * @brief InvShiftRows shifts rows of the state as follows:
   * 1st row is unchanged
   * 2nd row shifts over one to the right
   * 3rd row shifts over two to the right
   * 4th row shifts over three to the right
   */
  void InvShiftRows();

  /**
   * @brief InvMixColumns multiplies state matrix in Galua field
   */
  void InvMixColumns();

  //some magic for galua field
  //we need only multiplication by fixed constants
  //here will be functions for it
  BYTE MulBy02(BYTE multiplier);
  BYTE MulBy03(BYTE multiplier);
  BYTE MulBy09(BYTE multiplier);
  BYTE MulBy0B(BYTE multiplier);
  BYTE MulBy0D(BYTE multiplier);
  BYTE MulBy0E(BYTE multiplier);
};

static BYTE Rcon[] =
{
  0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};

static BYTE SBox[] =
{
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static BYTE InvSBox[] =
{
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

#endif // AES_H